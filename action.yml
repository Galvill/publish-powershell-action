name: Publish PowerShell
description: |
  Publish a PowerShell module or script to GitHub Packages, the Posh Test
  Gallery, or the PowerShell Gallery.
inputs:
  token:
    description: |
      Token to authenticate.
    required: true
  target:
    description: |
      Set to `packages` for GitHub Packages, `testgallery` for Posh Test 
      Gallery, or `gallery` for PowerShell Gallery.
    required: true
  path:
    description: |
      Path to publish relative to the root of the project. Can either 
      be a .psm1 file, a .ps1 file, or a directory. If a directory, the action 
      will search for a .psd1 file in the root. If none are found, it will then 
      search for a .ps1 file in the root.
    required: true
runs:
  using: "composite"
  steps:
    - name: Validate Inputs
      run: |
        $ValidTargets = @("packages","testgallery","gallery")
        if ($ValidTargets -notcontains "${{ inputs.target }}") {
          throw "Invalid value provided for 'target' input."
        }
      shell: pwsh
    - name: Publish to GitHub Packages
      run: |
        if ("${{ inputs.target }}" -eq "packages") {
          Write-Host "Starting Action..."

          Write-Host "Installing PowerShellGet 3..."
          Install-Module PowerShellGet -AllowPrerelease -Force -Repository PSGallery -SkipPublisherCheck

          $FullPath = "${{ github.workspace }}\${{ inputs.path }}"

          if (Test-Path -Path $FullPath -PathType Container) {
            Write-Host "Input 'path' is a directory."

            . "${{ github.action_path }}\Find-PublishableFiles.ps1"
            $ResolvedPath = Find-PublishableFiles -Path $FullPath
          } else {
            Write-Host "Input 'path' is a file."
            $ResolvedPath = $FullPath
          }

          if ($ResolvedPath -like "*.psd1") {
            . "${{ github.action_path }}\Copy-FilesToModuleDirectory.ps1"
            $ResolvedPath = Copy-FilesToModuleDirectory -Path $ResolvedPath -ActionPath "${{ github.action_path }}"
          }

          Write-Host "Path to publish resolved to: $ResolvedPath"

          Write-Host "Registering local NuGet repository..."
          $LocalRepoPath = "${{ github.action_path }}\repo"
          New-Item -Path $LocalRepoPath -Type Directory | Out-Null
          Register-PSResourceRepository -Name "LocalRepo" -URL $LocalRepoPath

          Write-Host "Publishing to local NuGet repostiory..."
          Publish-PSResource -Path $ResolvedPath -Repository "LocalRepo"

          Write-Host "Install gpr tool..."
          dotnet tool install --global gpr

          Write-Host "Publishing to GitHub Packages..."
          $NupkgPath = Get-ChildItem -Path $LocalRepoPath -Include "*.nupkg" -Recurse
          gpr push -k ${{ inputs.token }} $NupkgPath -r "https://github.com/${{ github.repository_owner }}"

          Write-Host "Done!"
        }
      shell: pwsh